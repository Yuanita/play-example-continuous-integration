{"name":"Play-example-continuous-integration","tagline":"Illustrating how to do CI with GitHub, CloudBees, and the Play Framework","body":"Summary\r\n=======\r\n\r\nThe goal of this project is to illustrate how to set up a [Play](http://playframework.com) application, \r\nhosted on [GitHub](http://github.com), \r\nto use [CloudBees](http://cloudbees.com) for [continuous integration](https://en.wikipedia.org/wiki/Continuous_integration). In addition, it illustrates how to incorporate \r\nquality assurance tools ([Checkstyle](http://checkstyle.sourceforge.net/), [PMD](http://pmd.sourceforge.net/), [FindBugs](http://findbugs.sourceforge.net/), and [Jacoco](http://www.eclemma.org/jacoco/)) into continuous integration.\r\nFinally, it also illustrates how to trigger deployment from your CI process.\r\n\r\nNote that this procedure is tedious and complicated the first time you do it.  Luckily, \r\nonce you have successfully set up your first Play application on GitHub to use CloudBees for CI,\r\nyou can use it as a template for setting up future projects, and the procedure is much, much faster and easier.\r\n\r\nI've divided this procedure into two parts: a \"One Time Configuration\" (OTC) part containing steps you have to\r\nperform only once on your GitHub and CloudBees accounts, and a \"Per Project Configuration\" (PPC) part that\r\nyou have to do every time you want to put a new project under continuous integration.   Here's an overview:\r\n\r\n**Overview of One Time Configuration (OTC)**\r\n  1. Set up your GitHub account and host your Play application\r\n  \r\n  2. Set up your CloudBees account and create a sample Play application \r\n  \r\n     2.1 Create a ClickStart Play Application\r\n     \r\n     2.2 Install CloudBees SDK\r\n     \r\n  3. Configure CloudBees Jenkins plugins\r\n  \r\n     3.1 Install GitHub plugin\r\n     \r\n     3.2 Install QA plugins (optional)\r\n     \r\n     3.3 Install and configure build status badge (optional)\r\n     \r\n  4. Tell GitHub your CloudBees public key\r\n\r\n**Overview of Per Project Configuration (PPC)**\r\n  1. Prime the CloudBees pipeline\r\n  \r\n     1.1 Create the default project\r\n     \r\n     1.2 Delete the git repo on CloudBees\r\n     \r\n  2. Make CloudBees Jenkins job point to GitHub repo\r\n  \r\n     2.1 Wipe out workspace\r\n     \r\n     2.2 Point Jenkins job at GitHub repo\r\n     \r\n  3. Configure build trigger\r\n  \r\n     3.1 Set Jenkins job to build after a change to GitHub\r\n     \r\n     3.2 Add a webhook to your GitHub repo\r\n     \r\n  4. Test your new build\r\n  \r\n  5. Automate quality assurance tool invocation (optional)\r\n  \r\n     5.1 Invoke QA tools in the build command\r\n     \r\n     5.2 Invoke QA reporting tools after the build\r\n     \r\nLet's now look at each of these steps in detail.\r\n\r\nOne Time Configuration (OTC) Steps\r\n==================================\r\n\r\nThe following steps need to be done only once; they constitute the \"global\" configuration \r\nprocess for both GitHub and CloudBees for use as CI for Play applications.\r\n\r\nOTC Step 1: Set up your GitHub account and host your Play application\r\n---------------------------------------------------------------------\r\n\r\nBegin by setting up an account on GitHub and hosting your Play application using it.  Follow the \r\n[excellent instructions](https://help.github.com/articles/set-up-git) if you \r\nhaven't done this before.  \r\n\r\nYou might want to fork the play-example-continuous-integration repo if you want to quickly set up a basic Play application \r\nwith which to play with continuous integration.   This repo also includes the quality \r\nassurance tool enhancements documented in [play-example-quality-assurance](http://ics-software-engineering.github.io/play-example-quality-assurance/).\r\n\r\nOTC Step 2: Set up your CloudBees account and create a sample Play application\r\n------------------------------------------------------------------------------\r\n\r\n**OTC Step 2.1: Create a ClickStart Play Application**\r\n\r\nNow set up an account on CloudBees. After you have created your account, use [ClickStart](https://developer.cloudbees.com/bin/view/RUN/ClickStart) \r\nto automagically create a sample Play application.  While running the Play ClickStart, CloudBees will:\r\n  * Create a git repo to hold the source for the sample app.\r\n  * Create a database connected to the sample app.\r\n  * Set up a Jenkins build job for the sample app.\r\n  * Build the sample app using the Jenkins job.\r\n  * Deploy the sample app to the CloudBees hosting platform.\r\n  \r\nGetting all this done automatically is, clearly, pretty sweet, and you'll want to keep this sample app around for reference purposes. \r\nDoing the ClickStart also provides a sanity check that you can create, build, and deploy Play apps\r\non CloudBees.\r\n\r\n**OTC Step 2.2: Install CloudBees SDK**\r\n\r\nNow install the [CloudBees SDK](http://developer.cloudbees.com/bin/view/RUN/BeesSDK). \r\n\r\nOnce installed, download the code for the sample Play app you created using ClickStart to your local\r\nworkspace. To do this successfully, you will need to provide your public key to CloudBees so it\r\ncan authenticate you when you pull the code using git. Here are some useful references:\r\n  * [How to set your public key for git access in CloudBees](http://wiki.cloudbees.com/bin/view/DEV/How+to+set+your+Public+Key+for+Git+Access)\r\n  * [Git Troubleshooting on CloudBees](http://wiki.cloudbees.com/bin/view/DEV/Git+-+Getting+Started#HTroubleshooting)\r\n  * [Help for \"Permission denied (public key)\"](https://help.github.com/articles/error-permission-denied-publickey)\r\n  \r\nOnce you've downloaded the application, invoke \"play test\" to see that the system compiles and \r\nruns its tests successfully in your local environment.  \r\n   \r\nOnce you are comfortable with a \"vanilla\" version of a Play application on CloudBees, it is now time\r\nto start customizing it for continuous integration with GitHub.\r\n\r\nOTC Step 3: Configure CloudBees Jenkins plugins\r\n-----------------------------------------------\r\n\r\n**OTC Step 3.1: Install GitHub plugin**\r\n\r\nIn CloudBees, click on the \"Builds\" button in the nav bar to bring up your Jenkins instance, then \r\nclick on \"Manage Jenkins\" in the left side menu bar. This brings you to the following page:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/manage-jenkins.png\"/>\r\n\r\nClick on \"Manage plugins\", click on \"Available\", find \"GitHub Plugin\", and then install and restart your Jenkins instance.\r\nAfter doing that, you should see the following near the bottom of the list of \"Installed\" plugins in Jenkins:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/github-plugin.png\"/>\r\n\r\nNow go back to the \"Manage Jenkins\" page, and instead of clicking on \"Manage Plugins\", click on \r\n\"Configure System\". You'll find a \"Git plugin\" section halfway down the page. Provide your user.name\r\nand user.email values as illustrated below:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/git-plugin-config.png\"/>\r\n\r\nScroll down to the bottom of the page, and make sure that \"Manually manage hook URLs\" is selected:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/manually-manage-hook-url.png\"/>\r\n\r\n\r\n**OTC Step 3.2: Install QA plugins (optional)**\r\n\r\nPart of the allure of continuous integration is the ability to run quality assurance tools such \r\nas Checkstyle, PMD, FindBugs, and Jacoco in the cloud and to see trends in the issues reported\r\nby those tools over time. To provide good reporting on these tools, you will want to install their\r\nassociated plugins as well.  This is an optional step.\r\n\r\nFollowing the same process as before, go to the \"Manage Jenkins\" page, click on \"Manage Plugins\", \r\nand install the \"Static Analysis Utilities\", \"Static Analysis Collector Plug-in\", \"FindBugs Plug-In\", \r\n\"Jenkins JaCoCo Plugin\", \"PMD Plugin\", and \"Checkstyle Plugin\". Restart Jenkins. When all of these have been \r\ninstalled, the \"Available\" tab in the Manage Plugins page should contain the following:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/qa-plugins.png\"/>\r\n\r\n**OTC Step 3.3: Install and configure build status badge (optional)**\r\n\r\nIt's nice to be able to display the status of the build in your GitHub page.  Here's \r\nan example from the bottom of the [play-example-quality-assurance project's README page](https://github.com/ics-software-engineering/play-example-quality-assurance):\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/build-status-badge.png\"/>\r\n\r\nIf you want this (and of course you do), you must first install the \"embeddable-build-status\" plugin\r\nto Jenkins.  Go to \"Manage Jenkins\", then \"Manage Plugins\", then install embeddable-build-status.\r\nRestart Jenkins.  Once Jenkins has restarted, you should see the following near the bottom of the \r\n\"Available\" tab in the Manage Plugins page:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/embeddable-build-status.png\"/>\r\n\r\nNow you must configure Jenkins to support anonymous access by following the instructions [here](https://developer.cloudbees.com/bin/view/DEV/AnonymousAccess).\r\nIn brief, you must:\r\n  1. Provide the Jenkins anonymous role with \"Job/Read\" access.\r\n  2. Flip the switch for anonymous access by going to \"Manage Jenkins\", then \"Configure System\", then clicking \"Enable read-only access for anonymous users\", and finally clicking \"Save\".\r\n\r\nNow you can display the build badge in your GitHub README file with the following code:\r\n\r\n    [![Build Status](https://philipmjohnson.ci.cloudbees.com/buildStatus/icon?job=play-example-quality-assurance)](https://philipmjohnson.ci.cloudbees.com/job/play-example-quality-assurance/)\r\n\r\nOf course, replace \"philipmjohnson\" and \"play-example-quality-assurance\" by your own account and job name.\r\n\r\nBut, we're getting a little ahead of ourselves, since that's done on a per-repo basis. There's just one more \"one time configuration\" task to do. \r\n\r\nOTC Step 4: Tell GitHub your CloudBees public key\r\n-------------------------------------------------\r\n\r\nIn order for the CloudBees Jenkins server to obtain your GitHub project via git, GitHub needs\r\nto be given your CloudBees public key. Follow the instructions [here](http://wiki.cloudbees.com/bin/view/DEV/How+to+use+Private+GitHub+Repositories+with+CloudBees). \r\nThough these instructions say they are necessary for private GitHub repositories, actually you need\r\nto do this even if your repository is public.  In brief:\r\n  1. In CloudBees, go to Jenkins, then click on \"Manage Jenkins\", then click on \"Configure System\".  In the \"CloudBees DEV@Cloud Authorization\" section, there is a field named \"CloudBees Public Key\". Copy the contents of that field.   \r\n  2. In GitHub, go to Account Settings, click on \"SSH Keys\", then click \"Add SSH Key\", then paste your CloudBees public key and name it something like \"CloudBees\".\r\n\r\nWhen you're done, your GitHub SSH Key page should look something like this:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/github-public-keys.png\"/>\r\n\r\nPer Project Configuration\r\n=========================\r\n\r\nNow that you've finished the global configuration of CloudBees and GitHub, we can now \r\nset up continuous integration process for a specific Play application. Let's call this \r\n\"per project configuration\" (PPC).\r\n\r\nPPC Step 1:  Prime the CloudBees pipeline\r\n-----------------------------------------\r\n\r\n**PPC Step 1.1: Create the default project**\r\n\r\nAssume you have a GitHub-hosted Play application called \"play-example-continuous-integration\" for \r\nwhich you want to set up continuous integration on CloudBees. The\r\nfirst step is to use the Play ClickStart feature on CloudBees to, in a sense, \"prime the pump\" by\r\ncreating a sample project also called play-example-continuous-integration. When finished, CloudBees\r\nwill indicate that it has set up a git repository, jenkins job, mysql database, and running application:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/clickstart-play-example-continuous-integration.png\"/>\r\n\r\n**PPC Step 1.2: Delete the git repo on CloudBees**\r\n\r\nSince we are using GitHub as our repository, we will not need the one created by ClickStart on \r\nCloudBees, so it will reduce confusion to delete it.  After dismissing this dialog box, click on \"Repositories\" in the CloudBees nav bar, \r\nthen select \"play-example-continuous-integration\", then click \"Delete repository\".\r\n\r\nPPC Step 2: Make CloudBees Jenkins job point to GitHub repo\r\n-----------------------------------------------------------\r\n\r\nClick on \"Builds\" in the CloudBees nav bar, then select the play-example-continuous-integration job\r\nto get the following window:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/jenkins-play-example-continuous-integration.png\"/>\r\n\r\nIf you are not seeing all the menu items on the left hand side, it is likely because CloudBees\r\nis displaying you as a \"guest\" user.  If so, click on \"Login\" on the upper right side to restore\r\nfull access to the job.\r\n\r\n**PPC Step 2.1: Wipe out workspace**\r\n\r\nI have had problems in the past that were resolved by deleting the default workspace, so I recommend\r\nthat you click on Workspace, then \"Wipe out workspace\" to get rid of the default project source files. The \r\nfollowing image shows the project just before clicking the \"Wipe out workspace\" button:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/jenkins-play-example-continuous-integration.png\"/>\r\n\r\n**PPC Step 2.2: Point Jenkins job at GitHub repo**\r\n\r\nNow we'll tell the Jenkins job where the real source code lives.   Go to your GitHub project and \r\nfind the \"SSH Clone URL\" text field on the right side of the page, as shown below:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/github-ssh-clone-url.png\"/>\r\n\r\nClick the clipboard button to copy the URL. Now go to your CloudBees Jenkins job for \r\nplay-example-continuous-integration, click on \"Configure\", and scroll down to the source code management section.  You should see something like the following:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/jenkins-source-code-management-1.png\"/>\r\n\r\nJenkins is displaying this error because we previously deleted the default repo on CloudBees.\r\n\r\nNow paste in the SSH Clone URL that we copied from the GitHub repo, and tab out of the field. Jenkins\r\nshould now display the following:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/jenkins-source-code-management-2.png\"/>\r\n\r\nClick \"Save\" to save the new repo setting to your Jenkins job configuration.\r\n\r\nIf Jenkins displays an error, you'll need to fix it. A common problem is forgetting to give\r\nGitHub your CloudBees public key; see \"OTC Step 4\" for details.\r\n\r\nPPC Step 3: Configure build trigger\r\n-----------------------------------\r\n\r\nTo automate continuous integration, we want CloudBees to kick off a build each time a change is \r\npushed to the GitHub repo.  This requires configuration to both CloudBees and Github.\r\n\r\n**PPC Step 3.1: Set Jenkins job to build after a change to GitHub**\r\n\r\nSelect \"Configure\" in your job's home page, then scroll down to the \"Build Triggers\" section.\r\nUnselect \"Build when a change is pushed to CloudBees forge\", and select \"Build when a change is\r\npushed to GitHub\". The section should now look like this:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/build-triggers.png\"/>\r\n\r\nClick \"Save\" to save the new build triggers setting.\r\n\r\n**PPC Step 3B: Add a webhook to your GitHub repo**\r\n\r\nNow go to your GitHub repository, and click on \"Settings\", then \"Service Hooks\", then \"Webhook URLs\".\r\nAdd this webhook URL:\r\n\r\n    https://philipmjohnson.ci.cloudbees.com/github-webhook/\r\n    \r\nReplace \"philipmjohnson\" with your own CloudBees account name.  Click \"Update Settings\". When done,\r\nit should look like this:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/webhook-url.png\"/>\r\n\r\nPPC Step 4: Test your new build\r\n-------------------------------\r\n\r\nYou can now test your new build.   Simply click on \"Test Hook\" on the Webhook URL page of your \r\nGitHub repo.  You will not get any output from pressing this button, but it should trigger a new build in CloudBees. \r\n\r\nTo see if the build was triggered, go back to your CloudBees Jenkins job main page.  Within 10 seconds or so,\r\nyou should start to see activity in the Build History window.  See below for the start of the new build:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/first-build-main-page.png\"/>\r\n\r\nOnce you see build activity, go to the Console window to watch the progress of the first build:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/console-output-1.png\"/>\r\n\r\nIf all goes according to plan, after 5 to 10 minutes the console window should conclude with a \r\nsuccessful build and deployment:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/console-output-2.png\"/>\r\n\r\nCongratulations!  You've just set up continuous integration.\r\n\r\nPPC Step 5: Automate quality assurance tool invocation (optional)\r\n-----------------------------------------------------------------\r\n\r\nOverall, there are three steps to implementing QA into your continuous integration process:\r\n\r\n  1.  Add QA tool invocation to your Play build process, so, for example, you can run \"play checkstyle\" to \r\n      run the Checkstyle QA tool. For instructions on how do this, see the \r\n      [play-example-quality-assurance](http://ics-software-engineering.github.io/play-example-quality-assurance/) project.\r\n      \r\n  2.  Add the QA tool reporting plugins to your Jenkins instance, as explained in OTC Step 3.2 above.\r\n  \r\n  3.  Modify your Jenkins configuration to (a) invoke QA tools in the build command, and (b) \r\n      invoke QA reporting tools after the build. \r\n\r\n\r\nThis section explains how to do (3).\r\n\r\n**PPC Step 5.1: Invoke QA tools in the build command**  \r\n\r\nTo invoke your quality assurance tools as part of the build, include them in the build command.\r\nHere is an example of adding checkstyle, pmd, findbugs, and jacoco:cover to the build command, \r\nlocated in the \"Build\" section of your Jenkins job configuration page:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/build-command.png\"/>\r\n\r\nClick \"Save\" to save this change to your configuration.   Then, click \"Build Now\" to test that\r\nyour commands run correctly within Jenkins.\r\n\r\n**PPC Step 5.2: Invoke QA reporting tools after the build**\r\n\r\nTo obtain reports of your QA tool results within Jenkins, you can add \"Post-build Actions\".  In the\r\nPost-build Actions section of your Jenkins job configuration page, click on \"Add post-build action\". \r\nIf you have installed the QA plugins correctly, a menu similar to the following should appear:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/post-build-action-menu.png\"/>\r\n\r\nSelect the QA tools for which you wish to generate reports.  Here is an example set of post-build actions\r\nfor Checkstyle, PMD, and FindBugs reporting.  Note that you may need to set the path to the report \r\ngenerated by the tool invocation.  If you're not sure where the report is located, you can use the\r\n\"Workspace\" link to search through the target directory.  Note that you may need to configure the QA tool to generate its report in XML format.\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/post-build-actions.png\"/>\r\n\r\nHere is an example configuration for Jacoco test coverage reporting:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/jacoco-report-config.png\"/>\r\n\r\nClick on the \"Advanced\" button to configure aspects of the report. For example, you can configure the \r\nbuild to fail if a threshold number of warnings are exceeded, or configure the way the graphs are presented\r\non the page. \r\n\r\nSimplifying the setup once you've done it once\r\n------------------------------------------------\r\n\r\nHere's the silver lining for this whole complicated process:  After you've successfully got one of your projects\r\nconfigured for continuous integration, getting the second one is vastly more simple.   In the \r\n\"New Job\" page, choose \"copy existing job\", and then enter the name of the job that you've already\r\nset up for continuous integration:\r\n\r\n<img src=\"https://raw.github.com/ics-software-engineering/play-example-continuous-integration/master/images/copy-existing-job.png\"/>\r\n \r\nThat will do most of the configuration for you.   You'll need to change the git URL to point to your \r\nnew project's repo, but that might be the only change required if the two projects are otherwise \r\nsimilarly configured.\r\n\r\nBuild Status\r\n------------\r\n\r\nFor illustration purposes, here's the build status of this project:\r\n\r\n [![Build Status](https://philipmjohnson.ci.cloudbees.com/buildStatus/icon?job=play-example-continuous-integration)](https://philipmjohnson.ci.cloudbees.com/job/play-example-continuous-integration/)\r\n \r\nAcknowledgements\r\n----------------\r\n\r\nMany thanks to Felix Belzunce of CloudBees who patiently and promptly answered my many questions\r\nas I developed this tutorial.\r\n\r\n\r\n\r\n\r\n \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}